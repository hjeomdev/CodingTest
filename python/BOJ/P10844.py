import sys
from collections import deque

N = int(sys.stdin.readline().rstrip())

#  N이 1, 2, 3, 4일 때까지 손으로 일일히 다 써봤는데
# 9, 17, 31, 61 로 딱히 규칙성이 안보였다..
# https://velog.io/@ready2start/Python-백준-10844-쉬운-계단-수 에 설명을 읽어보고 풀어보겠다

# 위 블로그의 필자는 n자리의 수가 어떤 수로 끝나는지에 따라 계단수를 세었다.
# 1자리 수일 때 끝나는 수가 0 - 9이면,
# 0, 1, 1, 1, 1, 1, 1, 1, 1, 1.
# 2자리 수일 때 끝나는 수가 0 - 9이면,
# 1(10), 1(21), 2(12, 32), 2(23, 43), 2(34, 54), 2(45, 65), 2(56, 76), 2(67, 87), 2(78, 98), 1(89).
# 3자리 수일 때 끝나는 수가 0 - 9이면,
# 1(210), 3(101, 121, 321), 3(212, 232, 432), 4(123, 323, 343, 543), 4(234, 434, 454, 654), 4(345, 545, 565, 765), 4(456, 656, 676, 876), 4(567, 767, 787, 987), 3(678, 878, 898), 2(789, 989).
# dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j + 1]의 규칙을 찾아서 계산했다.
# 단, j == 0 이면 dp[i][j] = dp[i - 1][1]이고, j == 9 이면 dp[i][j] = dp[i - 1][8]

# 나는 n자리의 수가 어떤 수로 시작하는 지에 따라 계단수를 세었는데, 2차원 배열어 두면 규칙성을 찾을 수 있을지 해보겠다.
# 1자리 수일 때 시작하는 수가 0 - 9이면,
# 0, 1, 1, 1, 1, 1, 1, 1, 1, 1.
# 2자리 수일 때 시작하는 수가 0 - 9이면,
# 0, 2(10, 12), 2(21, 23), 2(32, 34), 2(43, 45), 2(54, 56), 2(65, 67), 2(76, 78), 2(87, 89), 1(98).
# 3자리 수일 때 시작하는 수가 0 - 9이면,
# 0, 3(101, 121, 123), 4(210, 212, 232, 234), 4(321, 323, 343, 345), 4(432, 434, 454, 456), 4(543, 545, 565, 567), 4(654, 656, 676, 678), 4(765, 767, 787, 789), 3(876, 878, 898), 2(987, 989).
# 4자리 수일 때 시작하는 수가 0 - 9이면,
# 0, 6(1010, 1012, 1210, 1212, 1232, 1234), 7(2101, 2121, 2123, 2321, 2323, 2343, 2345), 8(3210, 3212, 3232, 3234, 3432, 3434, 3454, 3456), ..., 7(7654, 7656, 7676, 7678, 7876, 7878, 7898), 6(8765, 8767, 8787, 8789, 8987, 8989), 3(9876, 9878, 9898).

# 0, 1, 1, 1, 1, 1, 1, 1, 1, 1.
# 0, 2, 2, 2, 2, 2, 2, 2, 2, 1.
# 0, 3, 4, 4, 4, 4, 4, 4, 3, 2.
# 0, 6, 7, 8, 8, 8, 8, 7, 6, 3.
# dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j + 1]
# 단, j == 0이면 0이고, j == 1이면 dp[i][j] = dp[i - 1][9] + dp[i - 1][2]이고, j == 9 이면 dp[i][j] = dp[i - 1][8] 이다.

stairs = [[], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1]]


def calc_stairs(n):
    global stairs

    if len(stairs) - 1 < n:
        for i in range(2, n + 1):
            temp = []
            for j in range(10):
                if j == 0:
                    temp.append(0)
                elif j == 1:
                    temp.append(stairs[i - 1][9] + stairs[i - 1][2])
                elif j == 9:
                    temp.append(stairs[i - 1][8])
                else:
                    temp.append(stairs[i - 1][j - 1] + stairs[i - 1][j + 1])
            stairs.append(temp)
    # print(stairs)
    return sum(stairs[n])


print(calc_stairs(N) % 1000000000)

# 32440KB	92ms